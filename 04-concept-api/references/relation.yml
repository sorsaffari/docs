methods:
  - method:
    common: &method-rolePlayersMap
      title: Retrieve roleplayers per role
      description: Retrieves a map of all instances involved in the Relation and the role each play.
    java:
      <<: *method-rolePlayersMap
      method: relation.rolePlayersMap();
      returns:
        - 'Map<[`Role`](/docs/concept-api/type?tab=java#role-methods), Set<[`Thing`](../04-concept-api/04-thing?tab=java#thing-methods.md)>>'
    javascript:
      <<: *method-rolePlayersMap
      method: await relation.rolePlayersMap();
      returns:
        - 'Map<[`Role`](/docs/concept-api/type?tab=java#role-methods), Set<[`Thing`](../04-concept-api/04-thing?tab=java#thing-methods.md)>>'
    python:
      <<: *method-rolePlayersMap
      method: relation.role_players_map()
      returns:
        - Dict[[`Role`](/docs/concept-api/type?tab=java#role-methods), set[[`Thing`](../04-concept-api/04-thing?tab=java#thing-methods.md)]]

  - method:
    common: &method-rolePlayers
      title: Retrieve roleplayers
      description: Retrieves all roleplayers of this this Relation, optionally filtered by given a role.
      accepts:
        param: &accepts-rolePlayers-role
          name: role
          description: The role to filter the roleplayers by.
          required: false
          default: N/A
    java:
      <<: *method-rolePlayers
      method: relation.rolePlayers(Role role);
      accepts:
        param:
          <<: *accepts-rolePlayers-role
          type: "[`Role`](/docs/concept-api/type?tab=java#role-methods)"
      returns:
        - "Stream of [`Thing`](../04-concept-api/04-thing?tab=java.md) objects"
    javascript:
      <<: *method-rolePlayers
      method: await relation.rolePlayers(role);
      accepts:
        param:
          <<: *accepts-rolePlayers-role
          type: "[`Role`](/docs/concept-api/type?tab=javascript#role-methods)"
      returns:
        - "Iterator of [`Thing`](../04-concept-api/04-thing?tab=java.md) objects"
    python:
      <<: *method-rolePlayers
      method: relation.role_players(role)
      accepts:
        param:
          <<: *accepts-rolePlayers-role
          type: "[`Role`](/docs/concept-api/type?tab=python#role-methods)"
      returns:
        - "Iterator of [`Thing`](../04-concept-api/04-thing?tab=java.md) objects"

  - method:
    common: &method-assign
      title: Add roleplayer
      description: Adds a new roleplayer to play the given role in this Relation.
      accepts: &accepts-assign
        param: &accepts-assign-role
          name: role
          description: The role to be played by the `thing`
          required: true
          default: N/A
        param: &accepts-assign-thing
          name: thing
          description: The thing to play the `role`
          required: true
          default: N/A
    java:
      <<: *method-assign
      method: relation.assign(Role role, Thing thing);
      accepts:
        param1:
          <<: *accepts-assign-role
          type: "[`Role`](/docs/concept-api/type?tab=java#role-methods)"
        param2:
          <<: *accepts-assign-thing
          type: "[`Thing`](../04-concept-api/04-thing?tab=java.md)"
      returns:
        - '[`Relation`](../04-concept-api/04-thing#relation-methods.md) object'
    javascript:
      <<: *method-assign
      method: await relation.assign(role, thing);
      accepts:
        param1:
          <<: *accepts-assign-role
          type: "[`Role`](/docs/concept-api/type?tab=javascript#role-methods)"
        param2:
          <<: *accepts-assign-thing
          type: "[`Thing`](../04-concept-api/04-thing?tab=javascript.md)"
      returns:
        - "`void`"
    python:
      <<: *method-assign
      method: relation.assign(role, thing)
      accepts:
        param1:
          <<: *accepts-assign-role
          type: "[`Role`](/docs/concept-api/type?tab=python#role-methods)"
        param2:
          <<: *accepts-assign-thing
          type: "[`Thing`](../04-concept-api/04-thing?tab=python.md)"
      returns:
        - '[`Relation`](../04-concept-api/04-thing#relation-methods.md) object'

  - method:
    common: &method-unassign
      title: Remove a roleplayer
      description: Removes the association of the given instance that plays the given role in this Relation.
      accepts:
        param1: &accepts-unassign-role
          name: role
          description: The role to no longer be played by the `thing` in this Relation.
          required: true
          default: N/A
        param2: &accepts-unassign-thing
          name: thing
          description: The instance to no longer play the `role` in this Relation.
          type: "[`Thing`](../04-concept-api/04-thing.md)"
          required: true
          default: N/A
    java:
      <<: *method-unassign
      method: relation.unassign(Role role, Thing thing);
      accepts:
        param1:
          <<: *accepts-unassign-role
          type: "[`Role`](/docs/concept-api/type?tab=java#role-methods)"
        param2:
          <<: *accepts-unassign-thing
          type: "[`Thing`](../04-concept-api/04-thing?tab=java.md)"
      returns:
        - '[`Relation`](../04-concept-api/04-thing#relation-methods.md) object'
    javascript:
      <<: *method-unassign
      method: await relation.unassign(role, thing);
      accepts:
        param1:
          <<: *accepts-unassign-role
          type: "[`Role`](/docs/concept-api/type?tab=javascript#role-methods)"
        param2:
          <<: *accepts-unassign-thing
          type: "[`Thing`](../04-concept-api/04-thing?tab=javascript.md)"
      returns:
        - "`void`"
    python:
      <<: *method-unassign
      method: relation.unassign(role, thing)
      accepts:
        param1:
          <<: *accepts-unassign-role
          type: "[`Role`](/docs/concept-api/type?tab=python#role-methods)"
        param2:
          <<: *accepts-unassign-thing
          type: "[`Thing`](../04-concept-api/04-thing?tab=python.md)"
      returns:
        - "[`Relation`](../04-concept-api/04-thing#relation-methods.md) object"
