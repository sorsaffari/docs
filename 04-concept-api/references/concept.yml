props:
  - prop:
    common: &prop-id
      title: Retrieve the identifier
      description: Retrieves the identifier of the concept generated by Grakn.
      returns:
        - "`String`"
    javascript:
      <<: *prop-id
      prop: 'concept["id"];'
    python:
      <<: *prop-id
      prop: concept.id

methods:
  - method:
    common: &method-id
      title: Retrieve the identifier
      description: Retrieves the identifier of the concept generated by Grakn.
      method: concept.id();
      returns:
        - "`ConceptId`"
    java:
      <<: *method-id

  - method:
    common: &method-isType
      title: Check if concept is a Type
      returns:
        - "`boolean`"
    java:
      <<: *method-isType
      method: concept.isType();
    javascript:
      <<: *method-isType
      method: concept.isType();
    python:
      <<: *method-isType
      method: concept.is_type()

  - method:
    common: &method-isThing
      title: Check if concept is a Thing
      returns:
        - "`boolean`"
    java:
      <<: *method-isThing
      method: concept.isThing();
    javascript:
      <<: *method-isThing
      method: concept.isThing();
    python:
      <<: *method-isThing
      method: concept.is_thing()

  - method:
    common: &method-isEntityType
      title: Check if concept is an EntityType
      returns:
        - "`boolean`"
    java:
      <<: *method-isEntityType
      method: concept.isEntityType();
    javascript:
      <<: *method-isEntityType
      method: concept.isEntityType();
    python:
      <<: *method-isEntityType
      method: concept.is_entity_type()

  - method:
    common: &method-isAttributeType
      title: Check if concept is an AttributeType
      returns:
        - "`boolean`"
    java:
      <<: *method-isAttributeType
      method: concept.isAttributeType();
    javascript:
      <<: *method-isAttributeType
      method: concept.isAttributeType();
    python:
      <<: *method-isAttributeType
      method: concept.is_attribute_type()

  - method:
    common: &method-isRelationType
      title: Check if concept is a RelationType
      returns:
        - "`boolean`"
    java:
      <<: *method-isRelationType
      method: concept.isRelationType();
    javascript:
      <<: *method-isRelationType
      method: concept.isRelationType();
    python:
      <<: *method-isRelationType
      method: concept.is_relation_type()

  - method:
    common: &method-isEntity
      title: Check if concept is an Entity
      returns:
        - "`boolean`"
    java:
      <<: *method-isEntity
      method: concept.isEntity();
    javascript:
      <<: *method-isEntity
      method: concept.isEntity();
    python:
      <<: *method-isEntity
      method: concept.is_entity()

  - method:
    common: &method-isAttribute
      title: Check if concept is an Attribute
      returns:
        - "`boolean`"
    java:
      <<: *method-isAttribute
      method: concept.isAttribute();
    javascript:
      <<: *method-isAttribute
      method: concept.isAttribute();
    python:
      <<: *method-isAttribute
      method: concept.is_attribute()

  - method:
    common: &method-isRelation
      title: Check if concept is a Relation
      returns:
        - "`boolean`"
    java:
      <<: *method-isRelation
      method: concept.isRelation();
    javascript:
      <<: *method-isRelation
      method: concept.isRelation();
    python:
      <<: *method-isRelation
      method: concept.is_relation()

  - method:
    common: &method-isRule
      title: Check if concept is a Rule
      returns:
        - "`boolean`"
    java:
      <<: *method-isRule
      method: concept.isRule();
    javascript:
      <<: *method-isRule
      method: concept.isRule();
    python:
      <<: *method-isRule
      method: concept.is_rule()

  - method:
    common: &method-asType
      title: Cast the concept as Type
      description: Casts the concept as Type so that we can call the Type methods on it.
      method: concept.asType();
      returns:
        - "[`Type`](/docs/concept-api/type?tab=java) object"
    java:
      <<: *method-asType

  - method:
    common: &method-asThing
      title: Cast the concept as Thing
      description: Casts the concept as Thing so that we can call the Thing methods on it.
      method: concept.asThing();
      returns:
        - "[`Thing`](../04-concept-api/04-thing?tab=java.md) object"
    java:
      <<: *method-asThing

  - method:
    common: &method-asEntityType
      title: Cast the concept as EntityType
      description: Casts the concept as EntityType so that we can call the EntityType methods on it.
      method: concept.asEntityType();
      returns:
        - "[`EntityType`](/docs/concept-api/type?tab=java#entitytype-methods) object"
    java:
      <<: *method-asEntityType

  - method:
    common: &method-asAttributeType
      title: Cast the concept as AttributeType
      description: Casts the concept as AttributeType so that we can call the AttributeType methods on it.
      method: concept.asAttributeType();
      returns:
        - "[`AttributeType`](/docs/concept-api/type?tab=java#attributetype-methods) object"
    java:
      <<: *method-asAttributeType

  - method:
    common: &method-asRelationType
      title: Cast the concept as RelationType
      description: Casts the concept as RelationType so that we can call the RelationType methods on it.
      method: concept.asRelationType();
      returns:
        - "[`RelationType`](/docs/concept-api/type?tab=java#relationtype-methods) object"
    java:
      <<: *method-asRelationType

  - method:
    common: &method-asEntity
      title: Cast the concept as Entity
      description: Casts the concept as Entity so that we can call the Entity methods on it.
      method: concept.asEntity();
      returns:
        - "`Entity` object"
    java:
      <<: *method-asEntity

  - method:
    common: &method-asAttribute
      title: Cast the concept as Attribute
      description: Casts the concept as Attribute so that we can call the Attribute methods on it.
      method: concept.asAttribute();
      returns:
        - "[`Attribute`](../04-concept-api/04-thing?tab=java#attribute-methods.md) object"
    java:
      <<: *method-asAttribute

  - method:
    common: &method-asRelation
      title: Cast the concept as Relation
      description: Casts the concept as Relation so that we can call the Relation methods on it.
      method: concept.asRelation();
      returns:
        - "[`Relation`](../04-concept-api/04-thing?tab=java#relation-methods.md) object"
    java:
      <<: *method-asRelation

  - method:
      common: &method-asRule
        title: Cast the concept as Rule
        description: Casts the concept as Relation so that we can call the Relation methods on it.
        method: concept.asRelation();
        returns:
          - "[`Rule`](../04-concept-api/03-rule?tab=java.md) object"
      java:
        <<: *method-asRelation

